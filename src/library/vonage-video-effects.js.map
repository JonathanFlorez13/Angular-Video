{"version":3,"file":"vonage-video-effects.js","mappings":"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","sources":["webpack://VideoEffects/webpack/universalModuleDefinition","webpack://VideoEffects/./node_modules/loglevel/lib/loglevel.js","webpack://VideoEffects/./lib/constants.ts","webpack://VideoEffects/./lib/effects/BackgroundEffectProcessor.ts","webpack://VideoEffects/./lib/effects/TFLiteLoader.ts","webpack://VideoEffects/./lib/effects/TimeWorker.ts","webpack://VideoEffects/./lib/effects/VideoTrackToCanvas.ts","webpack://VideoEffects/./lib/effects/background/BackgroundBlurEffect.ts","webpack://VideoEffects/./lib/effects/background/BackgroundEffect.ts","webpack://VideoEffects/./lib/effects/background/VirtualBackgroundEffect.ts","webpack://VideoEffects/./lib/types.ts","webpack://VideoEffects/./lib/utils/index.ts","webpack://VideoEffects/webpack/bootstrap","webpack://VideoEffects/./lib/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"VideoEffects\"] = factory();\n\telse\n\t\troot[\"VideoEffects\"] = factory();\n})(self, function() {\nreturn ","/*\n* loglevel - https://github.com/pimterry/loglevel\n*\n* Copyright (c) 2013 Tim Perry\n* Licensed under the MIT license.\n*/\n(function (root, definition) {\n    \"use strict\";\n    if (typeof define === 'function' && define.amd) {\n        define(definition);\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = definition();\n    } else {\n        root.log = definition();\n    }\n}(this, function () {\n    \"use strict\";\n\n    // Slightly dubious tricks to cut down minimized file size\n    var noop = function() {};\n    var undefinedType = \"undefined\";\n    var isIE = (typeof window !== undefinedType) && (typeof window.navigator !== undefinedType) && (\n        /Trident\\/|MSIE /.test(window.navigator.userAgent)\n    );\n\n    var logMethods = [\n        \"trace\",\n        \"debug\",\n        \"info\",\n        \"warn\",\n        \"error\"\n    ];\n\n    // Cross-browser bind equivalent that works at least back to IE6\n    function bindMethod(obj, methodName) {\n        var method = obj[methodName];\n        if (typeof method.bind === 'function') {\n            return method.bind(obj);\n        } else {\n            try {\n                return Function.prototype.bind.call(method, obj);\n            } catch (e) {\n                // Missing bind shim or IE8 + Modernizr, fallback to wrapping\n                return function() {\n                    return Function.prototype.apply.apply(method, [obj, arguments]);\n                };\n            }\n        }\n    }\n\n    // Trace() doesn't print the message in IE, so for that case we need to wrap it\n    function traceForIE() {\n        if (console.log) {\n            if (console.log.apply) {\n                console.log.apply(console, arguments);\n            } else {\n                // In old IE, native console methods themselves don't have apply().\n                Function.prototype.apply.apply(console.log, [console, arguments]);\n            }\n        }\n        if (console.trace) console.trace();\n    }\n\n    // Build the best logging method possible for this env\n    // Wherever possible we want to bind, not wrap, to preserve stack traces\n    function realMethod(methodName) {\n        if (methodName === 'debug') {\n            methodName = 'log';\n        }\n\n        if (typeof console === undefinedType) {\n            return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives\n        } else if (methodName === 'trace' && isIE) {\n            return traceForIE;\n        } else if (console[methodName] !== undefined) {\n            return bindMethod(console, methodName);\n        } else if (console.log !== undefined) {\n            return bindMethod(console, 'log');\n        } else {\n            return noop;\n        }\n    }\n\n    // These private functions always need `this` to be set properly\n\n    function replaceLoggingMethods(level, loggerName) {\n        /*jshint validthis:true */\n        for (var i = 0; i < logMethods.length; i++) {\n            var methodName = logMethods[i];\n            this[methodName] = (i < level) ?\n                noop :\n                this.methodFactory(methodName, level, loggerName);\n        }\n\n        // Define log.log as an alias for log.debug\n        this.log = this.debug;\n    }\n\n    // In old IE versions, the console isn't present until you first open it.\n    // We build realMethod() replacements here that regenerate logging methods\n    function enableLoggingWhenConsoleArrives(methodName, level, loggerName) {\n        return function () {\n            if (typeof console !== undefinedType) {\n                replaceLoggingMethods.call(this, level, loggerName);\n                this[methodName].apply(this, arguments);\n            }\n        };\n    }\n\n    // By default, we use closely bound real methods wherever possible, and\n    // otherwise we wait for a console to appear, and then try again.\n    function defaultMethodFactory(methodName, level, loggerName) {\n        /*jshint validthis:true */\n        return realMethod(methodName) ||\n               enableLoggingWhenConsoleArrives.apply(this, arguments);\n    }\n\n    function Logger(name, defaultLevel, factory) {\n      var self = this;\n      var currentLevel;\n      defaultLevel = defaultLevel == null ? \"WARN\" : defaultLevel;\n\n      var storageKey = \"loglevel\";\n      if (typeof name === \"string\") {\n        storageKey += \":\" + name;\n      } else if (typeof name === \"symbol\") {\n        storageKey = undefined;\n      }\n\n      function persistLevelIfPossible(levelNum) {\n          var levelName = (logMethods[levelNum] || 'silent').toUpperCase();\n\n          if (typeof window === undefinedType || !storageKey) return;\n\n          // Use localStorage if available\n          try {\n              window.localStorage[storageKey] = levelName;\n              return;\n          } catch (ignore) {}\n\n          // Use session cookie as fallback\n          try {\n              window.document.cookie =\n                encodeURIComponent(storageKey) + \"=\" + levelName + \";\";\n          } catch (ignore) {}\n      }\n\n      function getPersistedLevel() {\n          var storedLevel;\n\n          if (typeof window === undefinedType || !storageKey) return;\n\n          try {\n              storedLevel = window.localStorage[storageKey];\n          } catch (ignore) {}\n\n          // Fallback to cookies if local storage gives us nothing\n          if (typeof storedLevel === undefinedType) {\n              try {\n                  var cookie = window.document.cookie;\n                  var location = cookie.indexOf(\n                      encodeURIComponent(storageKey) + \"=\");\n                  if (location !== -1) {\n                      storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];\n                  }\n              } catch (ignore) {}\n          }\n\n          // If the stored level is not valid, treat it as if nothing was stored.\n          if (self.levels[storedLevel] === undefined) {\n              storedLevel = undefined;\n          }\n\n          return storedLevel;\n      }\n\n      function clearPersistedLevel() {\n          if (typeof window === undefinedType || !storageKey) return;\n\n          // Use localStorage if available\n          try {\n              window.localStorage.removeItem(storageKey);\n              return;\n          } catch (ignore) {}\n\n          // Use session cookie as fallback\n          try {\n              window.document.cookie =\n                encodeURIComponent(storageKey) + \"=; expires=Thu, 01 Jan 1970 00:00:00 UTC\";\n          } catch (ignore) {}\n      }\n\n      /*\n       *\n       * Public logger API - see https://github.com/pimterry/loglevel for details\n       *\n       */\n\n      self.name = name;\n\n      self.levels = { \"TRACE\": 0, \"DEBUG\": 1, \"INFO\": 2, \"WARN\": 3,\n          \"ERROR\": 4, \"SILENT\": 5};\n\n      self.methodFactory = factory || defaultMethodFactory;\n\n      self.getLevel = function () {\n          return currentLevel;\n      };\n\n      self.setLevel = function (level, persist) {\n          if (typeof level === \"string\" && self.levels[level.toUpperCase()] !== undefined) {\n              level = self.levels[level.toUpperCase()];\n          }\n          if (typeof level === \"number\" && level >= 0 && level <= self.levels.SILENT) {\n              currentLevel = level;\n              if (persist !== false) {  // defaults to true\n                  persistLevelIfPossible(level);\n              }\n              replaceLoggingMethods.call(self, level, name);\n              if (typeof console === undefinedType && level < self.levels.SILENT) {\n                  return \"No console available for logging\";\n              }\n          } else {\n              throw \"log.setLevel() called with invalid level: \" + level;\n          }\n      };\n\n      self.setDefaultLevel = function (level) {\n          defaultLevel = level;\n          if (!getPersistedLevel()) {\n              self.setLevel(level, false);\n          }\n      };\n\n      self.resetLevel = function () {\n          self.setLevel(defaultLevel, false);\n          clearPersistedLevel();\n      };\n\n      self.enableAll = function(persist) {\n          self.setLevel(self.levels.TRACE, persist);\n      };\n\n      self.disableAll = function(persist) {\n          self.setLevel(self.levels.SILENT, persist);\n      };\n\n      // Initialize with the right level\n      var initialLevel = getPersistedLevel();\n      if (initialLevel == null) {\n          initialLevel = defaultLevel;\n      }\n      self.setLevel(initialLevel, false);\n    }\n\n    /*\n     *\n     * Top-level API\n     *\n     */\n\n    var defaultLogger = new Logger();\n\n    var _loggersByName = {};\n    defaultLogger.getLogger = function getLogger(name) {\n        if ((typeof name !== \"symbol\" && typeof name !== \"string\") || name === \"\") {\n          throw new TypeError(\"You must supply a name when creating a logger.\");\n        }\n\n        var logger = _loggersByName[name];\n        if (!logger) {\n          logger = _loggersByName[name] = new Logger(\n            name, defaultLogger.getLevel(), defaultLogger.methodFactory);\n        }\n        return logger;\n    };\n\n    // Grab the current global log variable in case of overwrite\n    var _log = (typeof window !== undefinedType) ? window.log : undefined;\n    defaultLogger.noConflict = function() {\n        if (typeof window !== undefinedType &&\n               window.log === defaultLogger) {\n            window.log = _log;\n        }\n\n        return defaultLogger;\n    };\n\n    defaultLogger.getLoggers = function getLoggers() {\n        return _loggersByName;\n    };\n\n    // ES6 default export, for compatibility\n    defaultLogger['default'] = defaultLogger;\n\n    return defaultLogger;\n}));\n","/* import { ModelConfig, PersonInferenceConfig } from '@tensorflow-models/body-pix/dist/body_pix_model'; */\nimport { InferenceDimensions } from './types';\n\nexport const BLUR_FILTER_RADIUS = 15;\nexport const OUTPUT_FRAMES_PER_SECOND = 30;\nexport const DEBOUNCE = 2;\nexport const MASK_BLUR_RADIUS = 5;\nexport const HISTORY_COUNT = 5;\nexport const PERSON_PROBABILITY_THRESHOLD = 0.4;\nexport const MODEL_NAME = 'selfie_segmentation_landscape.tflite';\nexport const TFLITE_LOADER_NAME = 'tflite.js';\nexport const TFLITE_SIMD_LOADER_NAME = 'tflite-simd.js';\nexport const TFLITE_MODELS_SEG_LITE = {\n    model96: 'segm_lite_v681.tflite',\n    model144: 'segm_full_v679.tflite'\n  };\n\n/* export const MODEL_CONFIG: ModelConfig = {\n  architecture: 'MobileNetV1',\n  outputStride: 16,\n  multiplier: 0.75,\n  quantBytes: 4,\n};\n\nexport const INFERENCE_CONFIG: PersonInferenceConfig = {\n  internalResolution: 1,\n  maxDetections: 1,\n  segmentationThreshold: 0.75,\n}; */\n\nexport const MODEL_WASM_INFERENCE_DIMENSIONS: InferenceDimensions = {\n    model96: {\n        height: 96,\n        width: 160\n    },\n    model144: {\n        height: 144,\n        width: 256\n    }\n};\n","import log from 'loglevel';\nimport {\n    CLEAR_TIMEOUT,\n    TIMEOUT_TICK,\n    SET_TIMEOUT,\n    timerWorkerScript\n} from './TimeWorker';\n\nimport {\n    MODEL_WASM_INFERENCE_DIMENSIONS,\n    OUTPUT_FRAMES_PER_SECOND,\n    TFLITE_MODELS_SEG_LITE,\n    TFLITE_SIMD_LOADER_NAME,\n} from '../constants';\nimport {loadTFLite} from './TFLiteLoader';\nimport {BackgroundEffect} from './background/backgroundEffect';\nimport {supportsDirectForwarding, VideoTrackToCanvas} from './VideoTrackToCanvas';\nimport {Dimensions} from '../types';\n\n/**\n * @private\n */\nexport interface BackgroundEffectOptions {\n    /**\n     * The assets path where the models and tflite are loaded.\n     * These assets can be copied from the `dist/build` folder.\n     */\n    assetsPath: string;\n\n    /**\n     * The output video stream's frame rate in fps\n     * @default\n     * ```html\n     * 30\n     * ```\n     */\n    frameRate?: number;\n\n    /**\n     * @private\n     */\n    useWasm?: boolean;\n}\n\nenum OutputState {\n    /**\n     * No output actively being sent\n     */\n    PAUSED,\n    /**\n     * The effect is applied to the output\n     */\n    EFFECT_APPLIED,\n    /**\n     * The input video is simply forwarded to the output\n     */\n    INPUT_FORWARDING\n}\n\nexport class BackgroundEffectProcessor {\n\n    private readonly _assetsPath: string;\n    private readonly _useWasm: boolean;\n\n    private readonly _inputVideoElement: HTMLVideoElement;\n    private readonly _outputCanvasElement: HTMLCanvasElement;\n    private readonly _outputCanvasCtx: CanvasRenderingContext2D;\n\n    private readonly _outputFramesPerSecond: number;\n    private readonly _maskFrameTimerWorker: any;\n\n    private _inputStream: MediaStream;\n    private _inputVideoTrack: MediaStreamTrack;\n\n    private _effect: BackgroundEffect | null;\n    private _inputForwardEffect: VideoTrackToCanvas | null;\n    private _effectEnabled = false;\n    private _outputState = OutputState.PAUSED;\n    private _tflite: any;\n    private _segmentationMaskDimensions: Dimensions;\n\n    constructor(options: BackgroundEffectOptions) {\n        this._useWasm = typeof options.useWasm === 'boolean' ? options.useWasm : true;\n        this._outputFramesPerSecond = typeof options.frameRate === 'number' ? options.frameRate : OUTPUT_FRAMES_PER_SECOND;\n        if (typeof options.assetsPath !== 'string') {\n            throw new Error('assetsPath parameter is missing');\n        }\n        let assetsPath = options.assetsPath;\n        if (assetsPath?.[assetsPath.length - 1] !== '/') {\n            assetsPath += '/';\n        }\n\n        this._assetsPath = assetsPath;\n        this._inputVideoElement = document.createElement('video');\n        this._outputCanvasElement = document.createElement('canvas');\n        this._outputCanvasCtx = this._outputCanvasElement.getContext('2d') as CanvasRenderingContext2D;\n\n        this._maskFrameTimerWorker = new Worker(timerWorkerScript, {name: 'BackgroundEffectWorker'});\n        this._maskFrameTimerWorker.onmessage = (e: MessageEvent) => {\n            if (e.data.id !== TIMEOUT_TICK) return;\n            this.renderFrame();\n        };\n    }\n\n    /**\n     * Returns true if the video stream processing is paused\n     */\n    get paused(): boolean {\n        return this._outputState === OutputState.PAUSED;\n    }\n\n    /**\n     * Pauses all ongoing video stream processing. This should be used when video isn't published to not use the CPU without any need for it.\n     */\n    pauseStreamProcessing(pause: boolean) {\n        this.setOutputState(pause ? OutputState.PAUSED : this.effectEnabled ? OutputState.EFFECT_APPLIED : OutputState.INPUT_FORWARDING);\n    }\n\n    /**\n     * If the effect is currently applied to the stream returned by the startEffect method.\n     */\n    get effectEnabled(): boolean {\n        return this._effectEnabled;\n    }\n\n    /**\n     * Enables or disables the effect on the stream returned by the startEffect method. If set to false, the input video track will simply be forwarded to the output.\n     * @param enable defines if the effect should be applied to the returned stream\n     */\n    enableEffect(enable: boolean) {\n        if (this.effectEnabled === enable) return;\n\n        this._effectEnabled = enable;\n        log.debug('effectEnabled changed to', enable);\n        if (this._outputState !== OutputState.PAUSED)\n            this.setOutputState(enable ? OutputState.EFFECT_APPLIED : OutputState.INPUT_FORWARDING);\n    }\n\n    /**\n     * Load the given effect as well as tflite and the segmentation model.\n     * Bust be called before the effect is enabled.\n     *\n     * This method can be called multiple times to change the applied background effect on demand.\n     */\n    async loadEffect(effect: BackgroundEffect) {\n        if (!this._tflite) {\n            log.debug('[loadEffect] loading tflite');\n            const modelToLoad = this._useWasm ? TFLITE_MODELS_SEG_LITE.model144 : TFLITE_MODELS_SEG_LITE.model96;\n            this._segmentationMaskDimensions = this._useWasm ? MODEL_WASM_INFERENCE_DIMENSIONS.model144 : MODEL_WASM_INFERENCE_DIMENSIONS.model96;\n            this._tflite = await loadTFLite(this._assetsPath + TFLITE_SIMD_LOADER_NAME, this._assetsPath + modelToLoad);\n        }\n        log.debug('[loadEffect] effect: ', effect.constructor.name);\n        this._effect = effect;\n        this._effect.init(this._tflite, this._segmentationMaskDimensions, this._inputVideoElement, this._outputCanvasCtx);\n    }\n\n\n    private setOutputState(state: OutputState) {\n        if (state === this._outputState) return;\n        log.debug('[outputState] changed from', OutputState[this._outputState], 'to', OutputState[state]);\n        this._outputState = state;\n        this.applyOutputState();\n    }\n\n    private applyOutputState() {\n        // make sure to stop everything first before triggering new effects.\n        this.stopEffectProcessing();\n        if (this._inputForwardEffect) {\n            this._inputForwardEffect.stopDirectForwardingInputToOutput();\n            this._inputForwardEffect = null;\n        }\n\n        if (this._outputState === OutputState.EFFECT_APPLIED) {\n            log.debug('[applyOutputState] triggerEffectProcessing for background effect');\n            this.triggerEffectProcessing();\n        }\n\n        if (this._outputState === OutputState.INPUT_FORWARDING) {\n            if (supportsDirectForwarding()) {\n                log.debug('[applyOutputState] forwardInputToOutput');\n                this._inputForwardEffect = new VideoTrackToCanvas(this._inputVideoTrack, this._outputCanvasCtx);\n                this._inputForwardEffect.startDirectForwardingInputToOutput();\n            } else {\n                log.debug('[applyOutputState] triggerEffectProcessing for input forwarding');\n                this.triggerEffectProcessing();\n            }\n        }\n    }\n\n    private triggerEffectProcessing() {\n        this._maskFrameTimerWorker.postMessage({\n            id: SET_TIMEOUT,\n            timeMs: 1000 / this._outputFramesPerSecond\n        });\n    }\n\n    private stopEffectProcessing() {\n        this._maskFrameTimerWorker.postMessage({\n            id: CLEAR_TIMEOUT\n        });\n    }\n\n    /**\n     * Returns the previously set media stream\n     */\n    public get inputStream(): MediaStream {\n        return this._inputStream;\n    }\n\n    /**\n     * Sets / changes the input stream to the given stream. The effect will be applied to this stream and then forwarded to the ouput.\n     * @param stream the stream to use for the video input\n     */\n    public setInputStream(stream: MediaStream) {\n        log.debug('[inputStream] setting input stream', stream);\n        if (!stream?.getVideoTracks?.()[0]) {\n            log.warn('[inputStream] - Media Stream is null or doesn\\'t contain any video tracks');\n            throw new Error(`Invalid input stream is missing a video track: ${stream}`);\n        }\n\n        this.disconnectInputVideoElement();\n        if (this._inputForwardEffect) {\n            this._inputForwardEffect.stopDirectForwardingInputToOutput();\n            this._inputForwardEffect = null;\n        }\n\n        this._inputStream = stream;\n        this._inputVideoTrack = stream.getVideoTracks()[0];\n        const {width, height} = this._inputVideoTrack.getSettings?.() ?? this._inputVideoTrack.getConstraints();\n\n        log.debug('[inputStream] video track settings', this._inputVideoTrack.getSettings());\n        log.debug('[inputStream] height :', height);\n        log.debug('[inputStream] width :', width);\n\n        this._outputCanvasElement.width = Number(width);\n        this._outputCanvasElement.height = Number(height);\n\n        this._inputVideoElement.width = Number(width);\n        this._inputVideoElement.height = Number(height);\n        this._inputVideoElement.autoplay = true;\n        this._inputVideoElement.srcObject = stream;\n        this._inputVideoElement.onloadeddata = () => {\n            log.debug('[_inputVideoElement.onloadeddata] done');\n            this.applyOutputState();\n        };\n\n        log.debug('[inputStream] this._inputVideoElement.width :', this._inputVideoElement.width);\n        log.debug('[inputStream] this._inputVideoElement.height :', this._inputVideoElement.height);\n        log.debug('[inputStream] this._outputCanvasElement.width :', this._outputCanvasElement.width);\n        log.debug('[inputStream] this._outputCanvasElement.height :', this._outputCanvasElement.height);\n    }\n\n    /**\n     * Returns the output stream with the effect applied to it\n     */\n    public get outputStream(): MediaStream {\n        return this._outputCanvasElement.captureStream(Number(this._outputFramesPerSecond));\n    }\n\n    private renderFrame() {\n        if (this._outputState === OutputState.EFFECT_APPLIED) {\n            this._effect?.applyEffect();\n            // schedule next rendering\n            this.triggerEffectProcessing();\n        } else if (this._outputState === OutputState.INPUT_FORWARDING && !this._inputForwardEffect) {\n            // simply forward the video if we don't support direct forwarding\n            this._outputCanvasCtx.globalCompositeOperation = 'copy';\n            this._outputCanvasCtx.filter = 'none';\n            this._outputCanvasCtx.drawImage(this._inputVideoElement, 0, 0);\n            // schedule next rendering\n            this.triggerEffectProcessing();\n        }\n    }\n\n    private disconnectInputVideoElement() {\n        this._inputVideoElement.pause();\n        this._inputVideoElement.srcObject = null;\n        if (this._inputVideoTrack)\n            this._inputVideoTrack.stop();\n    }\n\n    public destroy() {\n        log.debug('destroy');\n        this.pauseStreamProcessing(true);\n        this._maskFrameTimerWorker.terminate();\n        this.disconnectInputVideoElement();\n    }\n\n}\n\n","import {TFLITE_MODELS_SEG_LITE, TFLITE_SIMD_LOADER_NAME} from '../constants';\nimport log from 'loglevel';\n\n/**\n * Loads tensorflow lite and initializes it with the given model\n * @param tflitePath path to the tflite lib\n * @param modelPath path to the tflite model\n */\nexport async function loadTFLite(tflitePath: string, modelPath: string): Promise<any> {\n    const [tflite, modelResponse] = await Promise.all([\n        loadTFLiteModule(tflitePath),\n        fetch(modelPath)\n    ]);\n\n    log.debug('ModelResponse', modelResponse);\n\n    if (!tflite) {\n        log.error('[BackgroundEffect] - Tflite module not supported or available');\n        throw new Error('[BackgroundEffect] - Tflite module not supported or available');\n    }\n\n    const model = await modelResponse.arrayBuffer();\n    const modelBufferOffset = tflite._getModelBufferMemoryOffset();\n    tflite.HEAPU8.set(new Uint8Array(model), modelBufferOffset);\n    tflite._loadModel(model.byteLength);\n\n    return tflite;\n}\n\n\nasync function loadTFLiteModule(path: string): Promise<any> {\n    let tflite: any;\n    await createJSScript(path);\n\n    try {\n        tflite = await window.createTFLiteSIMDModule();\n    } catch {\n        log.warn('SIMD not supported. You may experience poor quality of background replacement.');\n    }\n    return tflite;\n}\n\nasync function createJSScript(url: string): Promise<void> {\n    return new Promise((resolve, reject) => {\n        const script = document.createElement('script');\n        script.onload = () => resolve();\n        script.onerror = reject;\n        document.head.append(script);\n        script.src = url;\n    });\n}","\n/**\n * SET_TIMEOUT constant is used to set interval and it is set in\n * the id property of the request.data property. timeMs property must\n * also be set. request.data example:\n *\n * {\n *      id: SET_TIMEOUT,\n *      timeMs: 33\n * }\n */\n export const SET_TIMEOUT = 1;\n\n /**\n  * CLEAR_TIMEOUT constant is used to clear the interval and it is set in\n  * the id property of the request.data property.\n  *\n  * {\n  *      id: CLEAR_TIMEOUT\n  * }\n  */\n export const CLEAR_TIMEOUT = 2;\n \n /**\n  * TIMEOUT_TICK constant is used as response and it is set in the id property.\n  *\n  * {\n  *      id: TIMEOUT_TICK\n  * }\n  */\n export const TIMEOUT_TICK = 3;\n \n /**\n  * The following code is needed as string to create a URL from a Blob.\n  * The URL is then passed to a WebWorker. Reason for this is to enable\n  * use of setInterval that is not throttled when tab is inactive.\n  */\n const code = `\n     let timer;\n \n     onmessage = function(request) {\n         switch (request.data.id) {\n         case ${SET_TIMEOUT}: {\n             timer = setTimeout(() => {\n                 postMessage({ id: ${TIMEOUT_TICK} });\n             }, request.data.timeMs);\n             break;\n         }\n         case ${CLEAR_TIMEOUT}: {\n             if (timer) {\n                 clearTimeout(timer);\n             }\n             break;\n         }\n         }\n     };\n `;\n \n export const timerWorkerScript = URL.createObjectURL(new Blob([ code ], { type: 'application/javascript' }));","import log from 'loglevel';\n\nexport function supportsDirectForwarding(): boolean {\n    return !!window.MediaStreamTrackProcessor;\n}\n\nexport class VideoTrackToCanvas {\n    private readonly inputVideoTrack: MediaStreamTrack;\n    private readonly outputCanvasCtx: CanvasRenderingContext2D;\n    private enabled = false;\n\n    constructor(inputVideoTrack: MediaStreamTrack, outputCanvasCtx: CanvasRenderingContext2D) {\n        this.inputVideoTrack = inputVideoTrack;\n        this.outputCanvasCtx = outputCanvasCtx;\n    }\n\n    public startDirectForwardingInputToOutput() {\n        this.enabled = true;\n        if (!supportsDirectForwarding())\n            throw new Error('Your browser doesn\\'t support the MediaStreamTrackProcessor API yet');\n\n        log.debug('forwardInputToOutput');\n        const processor = new MediaStreamTrackProcessor({track: this.inputVideoTrack});\n        const reader = processor.readable.getReader();\n        this.writeFramesToOutput(reader);\n    }\n\n    public stopDirectForwardingInputToOutput() {\n        this.enabled = false;\n    }\n\n    private async writeFramesToOutput(reader: ReadableStreamReader<VideoFrame>) {\n        try {\n            const {done, value} = await reader.read();\n            if (done) return;\n            if (!this.enabled) {\n                value.close();\n                return;\n            }\n\n            if (this.outputCanvasCtx != null) {\n                // the MediaStream video can have dynamic size\n                if (this.outputCanvasCtx.canvas.width !== value.displayWidth || this.outputCanvasCtx.canvas.height !== value.displayHeight) {\n                    this.outputCanvasCtx.canvas.width = value.displayWidth;\n                    this.outputCanvasCtx.canvas.height = value.displayHeight;\n                }\n                this.outputCanvasCtx.filter = 'none';\n                this.outputCanvasCtx.globalCompositeOperation = 'copy';\n                // value is a VideoFrame but the TS DOM lib doesn't support this as parameter yet\n                this.outputCanvasCtx.drawImage(value as any, 0, 0);\n                value.close(); // close the VideoFrame when we're done with it\n            }\n            // write the next frame\n            this.writeFramesToOutput(reader);\n        } catch (e) {\n            log.error('Error reading video stream: ' + e, e);\n        }\n    }\n\n}","import {BackgroundEffect, BackgroundEffectOptions} from './BackgroundEffect';\nimport {BLUR_FILTER_RADIUS} from '../../constants';\nimport log from 'loglevel';\n\nexport interface BackgroundBlurEffectOptions extends BackgroundEffectOptions {\n    blurFilterRadius?: number;\n}\n\nexport class BackgroundBlurEffect extends BackgroundEffect {\n    private _blurFilterRadius: number;\n\n    constructor(options: BackgroundBlurEffectOptions) {\n        super(options);\n        this.blurFilterRadius = options?.blurFilterRadius!;\n    }\n\n    get blurFilterRadius(): number {\n        return this._blurFilterRadius;\n    }\n\n    set blurFilterRadius(radius: number | null | undefined) {\n        if (!radius) {\n            log.warn(`Valid blur filter radius not found. Using ${BLUR_FILTER_RADIUS} as default.`);\n            radius = BLUR_FILTER_RADIUS;\n        }\n        this._blurFilterRadius = radius;\n    }\n\n    protected drawBackground(input: HTMLVideoElement, outputCanvasCtx: CanvasRenderingContext2D): void {\n        outputCanvasCtx.filter = `blur(${this._blurFilterRadius}px)`;\n        outputCanvasCtx.drawImage(input, 0, 0);\n    }\n}\n","import log from 'loglevel';\nimport {\n    MASK_BLUR_RADIUS\n} from '../../constants';\nimport {Dimensions} from '../../types';\n\n/**\n * @private\n */\nexport interface BackgroundEffectOptions {\n    /**\n     * The blur radius to use when smoothing out the edges of the person's mask.\n     * @default\n     * ```html\n     * 5\n     * ```\n     */\n    maskBlurRadius?: number;\n}\n\nexport abstract class BackgroundEffect {\n    private _tflite: any;\n    private _inputVideoElement: HTMLVideoElement;\n    private _outputCanvasCtx: CanvasRenderingContext2D | null;\n\n    private readonly _segmentationMaskCanvas: HTMLCanvasElement;\n    private readonly _segmentationMaskCtx: CanvasRenderingContext2D;\n    private _segmentationMask: ImageData;\n    private _maskBlurRadius: number;\n\n    protected constructor(options: BackgroundEffectOptions) {\n        log.setLevel('DEBUG');\n        this.maskBlurRadius = options?.maskBlurRadius;\n\n        this._segmentationMaskCanvas = document.createElement('canvas');\n        this._segmentationMaskCtx = this._segmentationMaskCanvas.getContext('2d') as CanvasRenderingContext2D;\n\n        log.debug('[BackgroundEffect] this._segmentationMaskCanvas.width :', this._segmentationMaskCanvas.width);\n        log.debug('[BackgroundEffect] this._segmentationMaskCanvas.height :', this._segmentationMaskCanvas.height);\n    }\n\n    public init(tflite: any, segmentationMaskDimensions: Dimensions, inputVideoElement: HTMLVideoElement, outputCanvesCtx: CanvasRenderingContext2D) {\n        this._tflite = tflite;\n        this._inputVideoElement = inputVideoElement;\n        this._outputCanvasCtx = outputCanvesCtx;\n        this._segmentationMask = new ImageData(segmentationMaskDimensions.width, segmentationMaskDimensions.height);\n        this._segmentationMaskCanvas.width = this._segmentationMask.width;\n        this._segmentationMaskCanvas.height = this._segmentationMask.height;\n\n        log.debug('[BackgroundEffect.init] this._inputVideoElement.width :', this._inputVideoElement.width);\n        log.debug('[BackgroundEffect.init] this._inputVideoElement.height :', this._inputVideoElement.height);\n        log.debug('[BackgroundEffect.init] this._segmentationMask.width :', this._segmentationMask.width);\n        log.debug('[BackgroundEffect.init] this._segmentationMask.height :', this._segmentationMask.height);\n    }\n\n    /**\n     * The current blur radius when smoothing out the edges of the person's mask.\n     */\n    get maskBlurRadius(): number {\n        return this._maskBlurRadius;\n    }\n\n    /**\n     * Set a new blur radius to be used when smoothing out the edges of the person's mask.\n     */\n    set maskBlurRadius(radius: number | null | undefined) {\n        if (typeof radius !== 'number' || radius < 0) {\n            log.warn(`Valid mask blur radius not found. Using ${MASK_BLUR_RADIUS} as default.`);\n            radius = MASK_BLUR_RADIUS;\n        }\n        this._maskBlurRadius = radius;\n    }\n\n    /**\n     * Loop function to render the background mask.\n     *\n     * @returns {void}\n     */\n    public applyEffect(): void {\n        if (!this._tflite) throw new Error('Effect has to be initialized before it can be applied');\n\n        this.resizeSource();\n        this.runInference();\n        this.runPostProcessing();\n    }\n\n    /**\n     * Represents the resize source process.\n     *\n     * @returns {void}\n     */\n    private resizeSource() {\n        this._segmentationMaskCtx.drawImage(\n            this._inputVideoElement,\n            0,\n            0,\n            this._inputVideoElement.width,\n            this._inputVideoElement.height,\n            0,\n            0,\n            this._segmentationMask.width,\n            this._segmentationMask.height\n        );\n\n        const imageData = this._segmentationMaskCtx.getImageData(\n            0,\n            0,\n            this._segmentationMask.width,\n            this._segmentationMask.height\n        );\n        const inputMemoryOffset = this._tflite._getInputMemoryOffset() / 4;\n        const segmentationPixelCount = this._segmentationMask.width * this._segmentationMask.height;\n\n        for (let i = 0; i < segmentationPixelCount; i++) {\n            this._tflite.HEAPF32[inputMemoryOffset + (i * 3)] = imageData.data[i * 4] / 255;\n            this._tflite.HEAPF32[inputMemoryOffset + (i * 3) + 1] = imageData.data[(i * 4) + 1] / 255;\n            this._tflite.HEAPF32[inputMemoryOffset + (i * 3) + 2] = imageData.data[(i * 4) + 2] / 255;\n        }\n    }\n\n    /**\n     * Represents the run Tensorflow Interference.\n     *\n     * @returns {void}\n     */\n    private runInference() {\n        this._tflite._runInference();\n        const segmentationPixelCount = this._segmentationMask.width * this._segmentationMask.height;\n        const outputMemoryOffset = this._tflite._getOutputMemoryOffset() / 4;\n\n        for (let i = 0; i < segmentationPixelCount; i++) {\n            const background = this._tflite.HEAPF32[outputMemoryOffset + (i * 2)];\n            const person = this._tflite.HEAPF32[outputMemoryOffset + (i * 2) + 1];\n            const shift = Math.max(background, person);\n            const backgroundExp = Math.exp(background - shift);\n            const personExp = Math.exp(person - shift);\n\n            // Sets only the alpha component of each pixel.\n            this._segmentationMask.data[(i * 4) + 3] = (255 * personExp) / (backgroundExp + personExp);\n        }\n        this._segmentationMaskCtx.putImageData(this._segmentationMask, 0, 0);\n    }\n\n    /**\n     * Represents the run post processing.\n     *\n     * @returns {void}\n     */\n    private runPostProcessing() {\n        if (!this._outputCanvasCtx) return;\n\n        // Smooth out the edges.\n        this._outputCanvasCtx.filter = `blur(${this._maskBlurRadius}px)`;\n        this._outputCanvasCtx.globalCompositeOperation = 'copy';\n        this._outputCanvasCtx.drawImage(\n            this._segmentationMaskCanvas,\n            0,\n            0,\n            this._segmentationMask.width,\n            this._segmentationMask.height,\n            0,\n            0,\n            this._inputVideoElement.width,\n            this._inputVideoElement.height\n        );\n        this._outputCanvasCtx.globalCompositeOperation = 'source-in';\n        this._outputCanvasCtx.filter = 'none';\n        // Draw the foreground video.\n        this._outputCanvasCtx.drawImage(this._inputVideoElement, 0, 0);\n\n        this._outputCanvasCtx.globalCompositeOperation = 'destination-over';\n        this.drawBackground(this._inputVideoElement, this._outputCanvasCtx);\n    }\n\n    protected abstract drawBackground(input: HTMLVideoElement, outputCanvasCtx: CanvasRenderingContext2D): void;\n}\n","import {BackgroundEffect, BackgroundEffectOptions} from './BackgroundEffect';\nimport {ImageFit} from '../../types';\nimport log from 'loglevel';\n\nexport interface VirtualBackgroundEffectOptions extends BackgroundEffectOptions {\n\n    virtualBackground: {\n        backgroundImage: HTMLImageElement;\n        backgroundType: string;\n    };\n\n    fitType?: ImageFit;\n}\n\nexport class VirtualBackgroundEffect extends BackgroundEffect {\n    private _backgroundImage!: HTMLImageElement;\n    private _fitType!: ImageFit;\n\n    /**\n     * Construct a VirtualBackgroundEffect. Default values will be used for\n     * any missing optional properties in [[VirtualBackgroundEffectOptions]],\n     * and invalid properties will be ignored.\n     */\n    constructor(options: VirtualBackgroundEffectOptions) {\n        super(options);\n        this.backgroundImage = options.virtualBackground?.backgroundImage;\n        this.fitType = options.fitType || ImageFit.Fill;\n    }\n\n    /**\n     * The HTMLImageElement representing the current background image.\n     */\n    get backgroundImage(): HTMLImageElement {\n        return this._backgroundImage;\n    }\n\n    /**\n     * Set an HTMLImageElement as the new background image.\n     * An error will be raised if the image hasn't been fully loaded yet. Additionally, the image must follow\n     * [security guidelines](https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image)\n     * when loading the image from a different origin. Failing to do so will result to an empty output frame.\n     */\n    set backgroundImage(image: HTMLImageElement) {\n        if (!image || !image.complete || !image.naturalHeight) {\n            throw new Error('Invalid image. Make sure that the image is an HTMLImageElement and has been successfully loaded');\n        }\n        this._backgroundImage = image;\n    }\n\n    /**\n     * The current [[ImageFit]] for positioning of the background image in the viewport.\n     */\n    get fitType(): ImageFit {\n        return this._fitType;\n    }\n\n    /**\n     * Set a new [[ImageFit]] to be used for positioning the background image in the viewport.\n     */\n    set fitType(fitType: ImageFit) {\n        const validTypes = Object.keys(ImageFit);\n        if (!validTypes.includes(fitType as any)) {\n            log.warn(`Valid fitType not found. Using '${ImageFit.Fill}' as default.`);\n            fitType = ImageFit.Fill;\n        }\n        this._fitType = fitType;\n    }\n\n    protected drawBackground(input: HTMLVideoElement, outputCanvasCtx: CanvasRenderingContext2D): void {\n        const img = this._backgroundImage;\n        const imageWidth = img.naturalWidth;\n        const imageHeight = img.naturalHeight;\n        const canvasWidth = outputCanvasCtx.canvas.width;\n        const canvasHeight = outputCanvasCtx.canvas.height;\n\n        log.debug('img width', imageWidth);\n        log.debug('img height', imageHeight);\n        log.debug('canvas - w', canvasWidth);\n        log.debug('canvas- h', canvasHeight);\n\n        if (this._fitType === ImageFit.Fill) {\n            outputCanvasCtx.drawImage(img, 0, 0, imageWidth, imageHeight, 0, 0, canvasWidth, canvasHeight);\n        } else if (this._fitType === ImageFit.None) {\n            outputCanvasCtx.drawImage(img, 0, 0, imageWidth, imageHeight);\n        } else if (this._fitType === ImageFit.Contain) {\n            const {x, y, w, h} = this.getFitPosition(imageWidth, imageHeight, canvasWidth, canvasHeight, ImageFit.Contain);\n            outputCanvasCtx.drawImage(img, 0, 0, imageWidth, imageHeight, x, y, w, h);\n        } else if (this._fitType === ImageFit.Cover) {\n            const {x, y, w, h} = this.getFitPosition(imageWidth, imageHeight, canvasWidth, canvasHeight, ImageFit.Cover);\n            outputCanvasCtx.drawImage(img, 0, 0, imageWidth, imageHeight, x, y, w, h);\n        }\n    }\n\n    private getFitPosition(contentWidth: number, contentHeight: number,\n                            viewportWidth: number, viewportHeight: number, type: ImageFit)\n        : { h: number, w: number, x: number, y: number } {\n\n        // Calculate new content width to fit viewport width\n        let factor = viewportWidth / contentWidth;\n        let newContentWidth = viewportWidth;\n        let newContentHeight = factor * contentHeight;\n\n        // Scale down the resulting height and width more\n        // to fit viewport height if the content still exceeds it\n        if ((type === ImageFit.Contain && newContentHeight > viewportHeight)\n            || (type === ImageFit.Cover && viewportHeight > newContentHeight)) {\n            factor = viewportHeight / newContentHeight;\n            newContentWidth = factor * newContentWidth;\n            newContentHeight = viewportHeight;\n        }\n\n        // Calculate the destination top left corner to center the content\n        const x = (viewportWidth - newContentWidth) / 2;\n        const y = (viewportHeight - newContentHeight) / 2;\n\n        return {\n            x, y,\n            w: newContentWidth,\n            h: newContentHeight,\n        };\n    }\n}\n","/**\n * @private\n */\n declare global {\n    interface Window {\n      chrome: any;\n      createTFLiteSIMDModule: () => Promise<any>;\n      OT: Object & { VideoEffects?: any };\n      OffscreenCanvas : any;\n    }\n  }\n  \n  /**\n   * @private\n   */\n  export interface Timing {\n    delay?: number;\n    end?: number;\n    start?: number;\n  }\n  \n  /**\n   * @private\n   */\n  export interface Dimensions {\n    height: number;\n    width: number;\n  }\n\n  /**\n   * @private\n   */\n   export interface InferenceDimensions {\n    model96: Dimensions;\n    model144: Dimensions;\n  }\n  \n  /**\n   * ImageFit specifies the positioning of an image inside a viewport.\n   */\n  export enum ImageFit {\n    /**\n     * Scale the image up or down to fill the viewport while preserving the aspect ratio.\n     * The image will be fully visible but will add empty space in the viewport if\n     * aspect ratios do not match.\n     */\n    Contain = 'Contain',\n  \n    /**\n     * Scale the image to fill both height and width of the viewport while preserving\n     * the aspect ratio, but will crop the image if aspect ratios do not match.\n     */\n    Cover = 'Cover',\n  \n    /**\n     * Stretches the image to fill the viewport regardless of aspect ratio.\n     */\n    Fill = 'Fill',\n  \n    /**\n     * Ignore height and width and use the original size.\n     */\n    None = 'None'\n  }\n\n// These defs should be provided by the TS Dom typedef lib but as they are new they haven't been added yet.\ndeclare global {\n    /**\n     * The MediaStreamTrackProcessor interface of the Insertable Streams for MediaStreamTrack API consumes a MediaStreamTrack object's source and generates a stream of media frames.\n     */\n    interface MediaStreamTrackProcessor {\n        readonly readable: ReadableStream;\n\n    }\n\n    const MediaStreamTrackProcessor: {\n        prototype: MediaStreamTrackProcessor;\n        /**\n         * creates a new MediaStreamTrackProcessor object which consumes a MediaStreamTrack object's source and generates a stream of media frames.\n         */\n        new(options: { track: MediaStreamTrack, maxBufferSize?: number | undefined }): MediaStreamTrackProcessor;\n    };\n\n    /**\n     * The VideoFrame interface of the Web Codecs API represents a frame of a video.\n     */\n    interface VideoFrame {\n        /**\n         * Returns the width of the VideoFrame when displayed after applying aspect ratio adjustments.\n         */\n        readonly displayWidth: number;\n\n        /**\n         * Returns the height of the VideoFrame when displayed after applying aspect ratio adjustments.\n         */\n        readonly displayHeight: number;\n\n        /**\n         * Clears all states and releases the reference to the media resource.\n         */\n        close(): void;\n    }\n\n\n    interface Window {\n        MediaStreamTrackProcessor: MediaStreamTrackProcessor;\n        VideoFrame: VideoFrame;\n    }\n}\n  ","/**\n * @private\n */\n export function isBrowserSupported() {\n    return !!window.OffscreenCanvas && !(/Mobi/i.test(window.navigator.userAgent)) && !!window.chrome;\n  }\n  \nexport const isSupported = isBrowserSupported();\n  ","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import log from 'loglevel';\n\nimport { BackgroundBlurEffect, BackgroundBlurEffectOptions } from './effects/background/BackgroundBlurEffect';\nimport { VirtualBackgroundEffect, VirtualBackgroundEffectOptions } from './effects/background/VirtualBackgroundEffect';\nimport { isSupported } from './utils';\nimport {BackgroundEffectProcessor} from './effects/BackgroundEffectProcessor';\n\nwindow.OT = window.OT || {};\n\nif (process.env.NODE_ENV === 'production') {\n    log.setLevel('WARN');\n}\n\nwindow.OT.VideoEffects = {\n    isSupported,\n    BackgroundEffectProcessor,\n    BackgroundBlurEffect,\n    VirtualBackgroundEffect\n};\n\n\nexport {\n  isSupported,\n  BackgroundEffectProcessor,\n  BackgroundBlurEffect,\n  BackgroundBlurEffectOptions,\n  VirtualBackgroundEffect,\n  VirtualBackgroundEffectOptions\n};"],"names":["root","factory","exports","module","define","amd","self","definition","noop","undefinedType","isIE","window","navigator","test","userAgent","logMethods","bindMethod","obj","methodName","method","bind","Function","prototype","call","e","apply","arguments","traceForIE","console","log","trace","realMethod","undefined","replaceLoggingMethods","level","loggerName","i","length","this","methodFactory","debug","enableLoggingWhenConsoleArrives","defaultMethodFactory","Logger","name","defaultLevel","currentLevel","storageKey","persistLevelIfPossible","levelNum","levelName","toUpperCase","localStorage","ignore","document","cookie","encodeURIComponent","getPersistedLevel","storedLevel","location","indexOf","exec","slice","levels","clearPersistedLevel","removeItem","getLevel","setLevel","persist","SILENT","setDefaultLevel","resetLevel","enableAll","TRACE","disableAll","initialLevel","defaultLogger","_loggersByName","getLogger","TypeError","logger","_log","noConflict","getLoggers","BLUR_FILTER_RADIUS","OUTPUT_FRAMES_PER_SECOND","DEBOUNCE","MASK_BLUR_RADIUS","HISTORY_COUNT","PERSON_PROBABILITY_THRESHOLD","MODEL_NAME","TFLITE_LOADER_NAME","TFLITE_SIMD_LOADER_NAME","TFLITE_MODELS_SEG_LITE","model96","model144","MODEL_WASM_INFERENCE_DIMENSIONS","height","width","OutputState","constructor","options","_effectEnabled","_outputState","PAUSED","_useWasm","useWasm","_outputFramesPerSecond","frameRate","assetsPath","Error","_assetsPath","_inputVideoElement","createElement","_outputCanvasElement","_outputCanvasCtx","getContext","_maskFrameTimerWorker","Worker","timerWorkerScript","onmessage","data","id","TIMEOUT_TICK","renderFrame","paused","pauseStreamProcessing","pause","setOutputState","effectEnabled","EFFECT_APPLIED","INPUT_FORWARDING","enableEffect","enable","async","effect","_tflite","modelToLoad","_segmentationMaskDimensions","loadTFLite","_effect","init","state","applyOutputState","stopEffectProcessing","_inputForwardEffect","stopDirectForwardingInputToOutput","triggerEffectProcessing","supportsDirectForwarding","VideoTrackToCanvas","_inputVideoTrack","startDirectForwardingInputToOutput","postMessage","SET_TIMEOUT","timeMs","CLEAR_TIMEOUT","inputStream","_inputStream","setInputStream","stream","getVideoTracks","warn","disconnectInputVideoElement","getSettings","getConstraints","Number","autoplay","srcObject","onloadeddata","outputStream","captureStream","applyEffect","globalCompositeOperation","filter","drawImage","stop","destroy","terminate","loadTFLiteModule","path","tflite","url","Promise","resolve","reject","script","onload","onerror","head","append","src","createJSScript","createTFLiteSIMDModule","tflitePath","modelPath","modelResponse","all","fetch","error","model","arrayBuffer","modelBufferOffset","_getModelBufferMemoryOffset","HEAPU8","set","Uint8Array","_loadModel","byteLength","code","URL","createObjectURL","Blob","type","MediaStreamTrackProcessor","inputVideoTrack","outputCanvasCtx","enabled","reader","track","readable","getReader","writeFramesToOutput","done","value","read","close","canvas","displayWidth","displayHeight","BackgroundBlurEffect","BackgroundEffect","super","blurFilterRadius","_blurFilterRadius","radius","drawBackground","input","maskBlurRadius","_segmentationMaskCanvas","_segmentationMaskCtx","segmentationMaskDimensions","inputVideoElement","outputCanvesCtx","_segmentationMask","ImageData","_maskBlurRadius","resizeSource","runInference","runPostProcessing","imageData","getImageData","inputMemoryOffset","_getInputMemoryOffset","segmentationPixelCount","HEAPF32","_runInference","outputMemoryOffset","_getOutputMemoryOffset","background","person","shift","Math","max","backgroundExp","exp","personExp","putImageData","VirtualBackgroundEffect","backgroundImage","virtualBackground","fitType","ImageFit","Fill","_backgroundImage","image","complete","naturalHeight","_fitType","Object","keys","includes","img","imageWidth","naturalWidth","imageHeight","canvasWidth","canvasHeight","None","Contain","x","y","w","h","getFitPosition","Cover","contentWidth","contentHeight","viewportWidth","viewportHeight","factor","newContentWidth","newContentHeight","isBrowserSupported","OffscreenCanvas","chrome","isSupported","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","BackgroundBlurEffectOptions","VirtualBackgroundEffectOptions","BackgroundEffectProcessor","OT","VideoEffects"],"sourceRoot":""}